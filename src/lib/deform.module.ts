import { DataFrame } from '@youwol/dataframe'
import {
    Context, BuilderView, Flux, Property, Schema, ModuleFlux, Pipe, freeContract
} from '@youwol/flux-core'

import { DeformParameters, deform } from './deform'
import { pack } from './main'
import { createSurface, SurfaceParameters } from '@youwol/kepler'


export namespace DeformSurface {

    let svgIcon = `<g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)"
    fill="#000000" stroke="none">
    <path d="M259 4861 l-259 -259 0 -108 0 -108 76 74 c97 94 542 540 609 609
    l49 51 -108 0 -108 0 -259 -259z"/>
    <path d="M1102 4805 l-316 -315 -66 0 c-38 0 -71 -5 -78 -12 -7 -7 -12 -40
    -12 -78 l0 -66 -315 -316 -315 -316 0 -108 0 -108 76 74 c42 41 182 180 310
    308 129 127 236 232 239 232 3 0 5 -150 5 -333 l0 -333 -315 -316 -315 -316 0
    -108 0 -108 76 74 c42 41 182 180 310 308 129 127 236 232 239 232 3 0 5 -150
    5 -333 l0 -333 -315 -316 -315 -316 0 -108 0 -108 76 74 c42 41 182 180 310
    308 129 127 236 232 239 232 3 0 5 -150 5 -333 l0 -333 -315 -316 -315 -316 0
    -108 0 -108 76 74 c42 41 182 180 310 308 129 127 236 232 239 232 3 0 5 -150
    5 -333 l0 -333 -315 -317 -315 -317 0 -50 0 -50 58 0 58 0 318 315 317 315
    336 0 c267 0 333 -3 325 -12 -6 -7 -143 -146 -306 -309 -163 -163 -296 -299
    -296 -303 0 -3 46 -6 103 -6 l103 0 318 315 317 315 336 0 c267 0 333 -3 325
    -13 -6 -6 -143 -145 -306 -308 -163 -163 -296 -299 -296 -303 0 -3 46 -6 103
    -6 l103 0 318 315 317 315 336 0 c267 0 333 -3 325 -12 -6 -7 -143 -146 -306
    -309 -163 -163 -296 -299 -296 -303 0 -3 46 -6 103 -6 l103 0 318 315 317 315
    336 0 c267 0 333 -3 325 -13 -6 -6 -143 -145 -306 -308 -163 -163 -296 -299
    -296 -303 0 -3 46 -6 103 -6 l103 0 318 315 317 315 58 0 c31 0 62 5 69 12 7
    7 12 38 12 70 l0 57 315 317 315 318 0 103 c0 57 -3 103 -6 103 -3 0 -144
    -138 -312 -306 l-307 -305 -3 335 -2 335 315 317 315 318 0 103 c0 57 -3 103
    -6 103 -3 0 -144 -138 -312 -306 l-307 -305 -3 335 -2 335 315 317 315 318 0
    103 c0 57 -3 103 -6 103 -3 0 -144 -138 -312 -306 l-307 -305 -3 335 -2 335
    315 317 315 318 0 103 c0 57 -3 103 -6 103 -3 0 -144 -138 -312 -306 l-307
    -305 -3 335 -2 335 315 317 315 318 0 58 0 58 -51 0 -50 0 -317 -315 -316
    -315 -338 0 -338 0 262 264 c145 145 285 287 313 315 l49 51 -108 0 -108 0
    -316 -315 -316 -315 -338 0 -338 0 262 264 c145 145 285 287 313 315 l49 51
    -108 0 -108 0 -316 -315 -316 -315 -338 0 -338 0 262 264 c145 145 285 287
    313 315 l49 51 -108 0 -108 0 -316 -315 -316 -315 -338 0 -338 0 262 264 c145
    145 285 287 313 315 l49 51 -108 0 -108 0 -316 -315z m478 -418 c0 -2 -191
    -195 -425 -429 l-425 -425 0 338 0 338 88 90 87 90 338 0 c185 1 337 -1 337
    -2z m280 -1 c0 -2 -11 -29 -25 -60 -61 -139 -89 -311 -83 -517 l4 -150 -245
    -245 -246 -246 -40 12 c-91 28 -395 197 -395 221 0 5 219 229 488 498 399 401
    492 489 515 490 15 1 27 -1 27 -3z m620 1 c0 -5 -612 -617 -617 -617 -8 0 -2
    210 8 270 14 90 45 192 84 278 l34 72 245 0 c135 0 246 -2 246 -3z m900 0 c0
    -2 -279 -283 -620 -624 -550 -550 -625 -621 -658 -627 -20 -3 -39 -2 -43 2
    -19 21 -159 402 -159 432 0 6 181 192 403 414 l402 404 338 1 c185 1 337 -1
    337 -2z m900 0 c0 -2 -237 -241 -527 -531 l-528 -528 -3 139 c-4 170 15 294
    68 454 62 186 96 245 213 364 l102 103 338 1 c185 1 337 -1 337 -2z m110 -455
    l0 -338 -137 -137 c-75 -75 -141 -137 -148 -137 -6 0 -47 10 -91 22 -70 19
    -105 22 -304 22 l-225 1 450 452 c247 248 451 452 453 452 1 1 2 -151 2 -337z
    m-1231 -47 c-35 -125 -49 -244 -49 -412 l0 -161 -72 -12 c-40 -7 -194 -34
    -343 -61 -148 -27 -273 -49 -277 -49 -4 0 164 172 375 383 210 211 383 383
    384 383 1 -1 -7 -33 -18 -71z m-1272 -623 c30 -79 53 -145 51 -148 -2 -2 -71
    -7 -153 -11 -141 -8 -313 -2 -335 12 -5 3 73 88 173 188 l182 183 14 -41 c7
    -22 38 -105 68 -183z m-1051 -8 c54 -36 152 -92 217 -123 l118 -57 -221 -221
    -220 -220 0 344 c0 188 1 343 3 343 2 0 48 -30 103 -66z m3092 -10 l93 -16
    -23 -25 c-91 -97 -632 -632 -636 -629 -9 10 -82 317 -101 429 l-21 118 60 59
    59 58 118 11 c212 21 302 20 451 -5z m-838 -47 c0 -6 -745 -749 -752 -750 -4
    -1 -24 45 -44 102 -20 58 -58 159 -86 225 -27 67 -52 129 -55 139 -6 21 107
    135 142 142 11 2 193 36 405 74 212 38 386 70 388 70 1 1 2 -1 2 -2z m1179
    -74 c36 -20 78 -45 94 -55 l27 -19 0 -178 0 -178 -407 -407 -408 -408 -8 39
    c-31 146 -56 234 -98 345 -27 70 -49 130 -49 133 0 11 761 765 772 765 6 0 41
    -16 77 -37z m-2830 -119 c70 -13 124 -15 286 -10 110 3 215 9 233 12 18 4 32
    2 32 -3 0 -5 -244 -253 -542 -551 -437 -435 -559 -552 -627 -597 -46 -30 -86
    -55 -88 -55 -1 0 -3 137 -3 305 l0 305 303 304 c166 168 306 305 311 305 5 1
    48 -6 95 -15z m1731 -118 c12 -66 40 -183 61 -260 21 -78 39 -144 39 -147 0
    -5 -378 -387 -468 -472 l-29 -28 -193 36 c-107 19 -197 35 -202 35 -4 0 -8 45
    -8 100 l0 100 383 383 c210 212 385 381 388 378 3 -3 16 -60 29 -125z m-1052
    -186 c27 -69 67 -177 87 -241 l37 -115 -119 -118 c-114 -113 -119 -117 -153
    -112 -19 3 -127 9 -240 12 -200 6 -279 0 -399 -33 -15 -4 121 140 350 369 206
    206 377 372 380 369 4 -3 29 -62 57 -131z m2268 -626 c-7 -18 -153 -100 -239
    -134 -100 -40 -212 -68 -301 -77 l-69 -6 304 304 304 304 3 -190 c1 -104 0
    -195 -2 -201z m-1017 135 c36 -88 99 -325 89 -334 -5 -6 -287 33 -426 58 l-66
    12 174 177 c96 97 179 175 185 174 5 -1 25 -40 44 -87z m-1506 -198 l39 -6
    -586 -586 -586 -586 0 339 0 338 194 193 c185 186 196 195 271 226 106 44 252
    81 355 89 91 7 251 4 313 -7z m366 -48 c23 -6 23 -8 17 -77 -10 -108 -33 -235
    -72 -398 l-35 -146 -306 -306 -306 -306 -339 0 -338 0 623 625 622 624 55 -5
    c30 -3 66 -8 79 -11z m317 -55 c68 -12 124 -25 124 -28 0 -4 -86 -92 -190
    -197 -105 -105 -188 -183 -185 -173 12 38 46 231 57 328 l13 104 28 -6 c16 -3
    84 -16 153 -28z m1844 -46 l0 -68 -427 -427 c-234 -235 -428 -426 -430 -424
    -2 2 3 35 11 73 28 134 48 331 50 495 l3 167 36 36 36 36 98 0 c176 1 375 52
    528 134 44 24 83 44 88 45 4 0 7 -30 7 -67z m-1325 -47 c83 -13 201 -31 264
    -39 62 -8 115 -17 117 -19 2 -2 -226 -234 -508 -515 l-511 -512 -229 0 c-181
    0 -228 3 -222 13 5 6 22 32 39 57 51 73 91 149 143 272 l49 116 332 331 c275
    274 336 330 354 326 12 -3 90 -16 172 -30z m415 -429 c-20 -265 -83 -574 -128
    -627 l-24 -29 -339 0 -339 0 418 418 c243 244 418 412 420 404 2 -8 -1 -83 -8
    -166z m910 -154 l0 -338 -82 -82 -81 -82 -339 0 -338 0 418 419 c229 231 418
    420 420 420 1 1 2 -151 2 -337z"/>
    <path d="M4759 362 c-192 -192 -349 -352 -349 -355 0 -4 46 -7 103 -7 l104 0
    251 251 252 252 0 103 c0 57 -3 104 -6 104 -4 0 -163 -157 -355 -348z"/></g>`



    @Schema({
        pack
    })
    export class PersistentData {
        /**
         *  access to the scaling in x, y and Z
         */
        @Property({
            description: "scale in X"
        })
        xScale: number = 1

        @Property({
            description: "scale in Y"
        })
        yScale: number = 1

        @Property({
            description: "scale in z"
        })
        zScale: number = 1

        constructor({ xScale = 1, yScale = 1, zScale = 1 }: {
            xScale?: number,
            yScale?: number,
            zScale?: number
        } = {}) {
            Object.assign(this, { xScale, yScale, zScale })
        }
    }

    @Flux({
        pack: pack,
        namespace: DeformSurface,
        id: "deformSurface",
        displayName: "deform surface",
        description: "deform 3D surfaces for a given displacement field ",
        resources: {
            'technical doc': `${pack.urlCDN}/dist/docs/modules/lib_deform_surface.deform_surface.html`
        }
    })
    @BuilderView({
        namespace: DeformSurface,
        icon: svgIcon
    })
    export class Module extends ModuleFlux {

        /**
         * This is the output, you can use it to emit messages using *this.result$.next(...)*.
         *
         */
        result$: Pipe<any>

        constructor(params) {
            super(params)

            this.addInput({
                id: 'input',
                description: 'trigger deformation',
                contract: freeContract(),
                onTriggered: ({ data, configuration, context }) => this.deformSurface(data, configuration, context)
            })
            this.result$ = this.addOutput({ id: 'result' })
        }
        deformSurface(data: any, configuration: PersistentData, context: Context) {
            const pm = new DeformParameters({
                scaleX: configuration.xScale,
                scaleY: configuration.yScale,
                scaleZ: configuration.zScale
            })

            let deformedSerie = deform({
                geometry: data.children[0].geometry,
                deformVector: data.children[0].dataframe.series['Displ'],
                parameters: pm
            })

            let deformedSurface = createSurface({
                positions: deformedSerie.array,
                indices: data.children[0].geometry.index.array,
                parameters: new SurfaceParameters({
                    color: '#ff0000',
                    flat: true,
                    opacity: 0.7, 
                    creaseAngle: 30 // in degrees
                })
            })

            this.result$.next({ data: deformedSurface, context })
            context.terminate()
        }
    }
}